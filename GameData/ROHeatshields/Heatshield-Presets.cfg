// Surrogate parts to extract stats from the RO heatshield configger:
PART { name = ROHS_PresetTransfer_Lunar }
PART { name = ROHS_PresetTransfer_EarlyLunar }
PART { name = ROHS_PresetTransfer_Gemini }
PART { name = ROHS_PresetTransfer_Mercury }
PART { name = ROHS_PresetTransfer_Heatsink }
@PART[ROHS_PresetTransfer_*]:BEFORE[RealismOverhaul_HeatShield]
{
    heatShieldTag = #$name$
    @heatShieldTag ^= :ROHS_PresetTransfer_::
    // Placeholder to please the RO heatshield configger.
    RESOURCE
    {
        name = Ablator
        maxAmount = 0
    }
}

ROHS_PRESET
{
    name = Heatsink
    description = Rated for LEO reentries with a deeply negative perigee.
}
ROHS_PRESET
{
    name = MercuryHS
    description = Rated for non-lifting LEO reentries.
}
ROHS_PRESET
{
    name = GeminiHS
    description = Rated for lifting LEO reentries.
}
ROHS_PRESET
{
    name = EarlyLunarHS
    description = Rated for lunar reentries.
}
ROHS_PRESET
{
    name = LunarHS
    description = Rated for interplanetary reentries.
}
ROHS_PRESET
{
    name = default
    description = base part
}


@ROHS_PRESET[Heatsink]:AFTER[RealismOverhaul_HeatShield] { #@PART[ROHS_PresetTransfer_Heatsink] {} }
@ROHS_PRESET[MercuryHS]:AFTER[RealismOverhaul_HeatShield] { #@PART[ROHS_PresetTransfer_Mercury] {} }
@ROHS_PRESET[GeminiHS]:AFTER[RealismOverhaul_HeatShield] { #@PART[ROHS_PresetTransfer_Gemini] {} }
@ROHS_PRESET[EarlyLunarHS]:AFTER[RealismOverhaul_HeatShield] { #@PART[ROHS_PresetTransfer_EarlyLunar] {} }
@ROHS_PRESET[LunarHS]:AFTER[RealismOverhaul_HeatShield] { #@PART[ROHS_PresetTransfer_Lunar] {} }


!PART[ROHS_PresetTransfer_*]:AFTER[RealismOverhaul_HeatShield] {}


@ROHS_PRESET:HAS[@PART]:FOR[ROHeatshields]
{
    disableModAblator = true
    maxTempOverride = #$PART/maxTemp$
    skinMaxTempOverride = #$PART/skinMaxTemp$

    massOverride = 0.0001 //can be arbitrarily small, but needs to be >0
    heatShieldDensity = #$PART/heatShieldDensity$ // hs mass when diameter = 1m, scales linearly

    &heatShieldBaseCost = 0 // fixed cost factor
    &heatShieldDiameterCost = 0 // linear cost factor (base part cost for a 1m shield)
    &heatShieldAreaCost = 0 // quadratic cost factor
}

@ROHS_PRESET:HAS[@PART:HAS[~heatShieldNoAblator[?rue]]]:FOR[ROHeatshields]
{
    @disableModAblator = false
    heatShieldAblator = #$PART/heatShieldAblator$ // ablator when diameter = 1m, scales linearly

    // any ModuleAblator override goes here
    // you can include any field that you would find in a normal ModuleAblator,
    // and it will adjust selecting the ModuleAblator in the part
    ablativeResource = #$PART/MODULE[ModuleAblator]/ablativeResource$
    outputResource = #$PART/MODULE[ModuleAblator]/outputResource$
    outputMult = #$PART/MODULE[ModuleAblator]/outputMult$
    lossExp = #$PART/MODULE[ModuleAblator]/lossExp$
    lossConst = #$PART/MODULE[ModuleAblator]/lossConst$
    pyrolysisLossFactor = #$PART/MODULE[ModuleAblator]/pyrolysisLossFactor$
    ablationTempThresh = #$PART/MODULE[ModuleAblator]/ablationTempThresh$
    reentryConductivity = #$PART/MODULE[ModuleAblator]/reentryConductivity$
}

@ROHS_PRESET:HAS[@PART:HAS[#thermalMassModifier]]:FOR[ROHeatshields]
{
    thermalMassModifierOverride = #$PART/thermalMassModifier$
}

@ROHS_PRESET:HAS[@PART:HAS[#skinThermalMassModifier]]:FOR[ROHeatshields]
{
    skinThermalMassModifierOverride = #$PART/skinThermalMassModifier$
}

@ROHS_PRESET:HAS[@PART:HAS[#skinMassPerArea]]:FOR[ROHeatshields]
{
    skinMassPerAreaOverride = #$PART/skinMassPerArea$
}

@ROHS_PRESET:HAS[@PART:HAS[#skinInternalConductionMult]]:FOR[ROHeatshields]
{
    skinInternalConductionMultOverride = #$PART/skinInternalConductionMult$
}

@ROHS_PRESET:HAS[@PART:HAS[#skinSkinConductionMult]]:FOR[ROHeatshields]
{
    skinSkinConductionMultOverride = #$PART/skinSkinConductionMult$
}

@ROHS_PRESET:HAS[@PART:HAS[#emissiveConstant]]:FOR[ROHeatshields]
{
    emissiveConstantOverride = #$PART/emissiveConstant$
}

@ROHS_PRESET:HAS[@PART:HAS[#heatConductivity]]:FOR[ROHeatshields]
{
    heatConductivityOverride = #$PART/heatConductivity$
}

@ROHS_PRESET:HAS[@PART:HAS[@MODULE[ModuleAblator]:HAS[#infoTemp]]]:FOR[ROHeatshields]
{
    infoTemp = #$PART/MODULE[ModuleAblator]/infoTemp$
}

@ROHS_PRESET:HAS[@PART]:FOR[ROHeatshields] { !PART {} }
